name: Build Go-Proxy-BingAI
on:
  push:
    tags:
      - v*

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  amd64build:
    name: build amd64 version
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v4

      - name: build linux amd64 version
        run: |
          go build -ldflags="-s -w" -tags netgo -trimpath -o go-proxy-bingai main.go

      - name: package linux amd64
        run: tar -zcvf go-proxy-bingai-linux-amd64.tar.gz go-proxy-bingai

      - name: upload linux amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: go-proxy-bingai-linux-amd64.tar.gz
          asset_name: go-proxy-bingai-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: build windows amd64 version
        run: |
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -tags netgo -trimpath -o go-proxy-bingai.exe main.go

      - name: package windows amd64
        run: tar -zcvf go-proxy-bingai-windows-amd64.tar.gz go-proxy-bingai.exe          

      - name: upload windows amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: go-proxy-bingai-windows-amd64.tar.gz
          asset_name: go-proxy-bingai-windows-amd64.tar.gz
          asset_content_type: application/gzip

  arm64build:
    name: build arm64 version
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v4
      - name: build linux arm64 version
        run: |
          go build -ldflags="-s -w" -tags netgo -trimpath -o go-proxy-bingai main.go

      - name: package linux arm64
        run: tar -zcvf go-proxy-bingai-linux-arm64.tar.gz go-proxy-bingai

      - name: upload linux arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: go-proxy-bingai-linux-arm64.tar.gz
          asset_name: go-proxy-bingai-linux-arm64.tar.gz
          asset_content_type: application/gzip

      - name: build windows amd64 version
        run: |
          GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -tags netgo -trimpath -o go-proxy-bingai.exe main.go

      - name: package windows arm64
        run: tar -zcvf go-proxy-bingai-windows-arm64.tar.gz go-proxy-bingai.exe          

      - name: upload windows arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: go-proxy-bingai-windows-arm64.tar.gz
          asset_name: go-proxy-bingai-windows-arm64.tar.gz
          asset_content_type: application/gzip

  docker-build:
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Setup timezone
        uses: zcong1993/setup-timezone@master
        with:
          timezone: Asia/Shanghai

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}        

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          file: ./docker/Dockerfile  
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:latest
            docker.io/${{ github.repository }}:${{ github.ref_name }}
            docker.io/${{ github.repository }}:latest
          cache-from: type=registry,ref=${{ github.repository }}:cache
          cache-to: type=registry,ref=${{ github.repository }}:cache,mode=max  
          
uses: nateraw/huggingface-sync-action@v0.0.5
with:
  # The github repo you are syncing from. Required.
  github_repo_id: verycafe/go-proxy-bingai

  # The Hugging Face repo id you want to sync to. (ex. 'username/reponame')
  # A repo with this name will be created if it doesn't exist. Required.
  huggingface_repo_id: supertv/GOTS-AI

  # Hugging Face token with write access. Required.
  # Here, we provide a token that we called `HF_TOKEN` when we added the secret to our GitHub repo.
  hf_token: ${{ secrets.HF_TOKEN }}

  # The type of repo you are syncing to: model, dataset, or space.
  # Defaults to space.
  repo_type: 'space'
  
  # If true and the Hugging Face repo doesn't already exist, it will be created
  # as a private repo.
  #
  # Note: this param has no effect if the repo already exists.
  private: false

  # If repo type is space, specify a space_sdk. One of: streamlit, gradio, or static
  #
  # This option is especially important if the repo has not been created yet.
  # It won't really be used if the repo already exists.
  space_sdk: 'gradio'
  
  # If provided, subdirectory will determine which directory of the repo will be synced.
  # By default, this action syncs the entire GitHub repo.
  #
  # An example using this option can be seen here:
  # https://github.com/huggingface/fuego/blob/830ed98/.github/workflows/sync-with-huggingface.yml
  subdirectory: ''
          
          
